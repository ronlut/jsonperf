package com.jsonperf;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.LambdaLogger;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;
import com.jsonperf.benchmark.Result;
import com.jsonperf.benchmark.Runner;
import com.jsonperf.benchmark.TitledBenchmark;
import com.jsonperf.libraries.Instantiator;
import com.jsonperf.libraries.Library;
import com.jsonperf.web.Chart;
import com.jsonperf.web.Charts;

import java.io.IOException;
import java.io.InputStream;
import java.util.*;

public class Handler implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent>{
    @Override
    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent event, Context context)
    {
        InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream("project.properties");
        Properties p = new Properties();
        try {
            p.load(is);
        } catch (IOException e) {
            e.printStackTrace();
            // todo: return error
        }
        List<Library> libs = Instantiator.instantiate(p);
        libs.sort(Comparator.comparing(Library::getName));
        Runner benchmarkRunner = new Runner(libs);

        // todo: validations + validate json
        // todo: extract json and file name from body

        List<TitledBenchmark> results = null;
        try {
            Map<String, Result> result = benchmarkRunner.run(event.getBody(), 100, 1);
            results = Collections.singletonList(new TitledBenchmark("FILENAME", result, null));
        } catch (Exception e) {
            e.printStackTrace();
            // todo: return error
        }

        List<Chart> charts = Charts.fromResults(results);

        // todo: return json
        APIGatewayProxyResponseEvent response = new APIGatewayProxyResponseEvent();
        response.setIsBase64Encoded(false);
        response.setStatusCode(200);
        HashMap<String, String> headers = new HashMap<String, String>();
        headers.put("Content-Type", "text/html");
        response.setHeaders(headers);
        response.setBody("<!DOCTYPE html><html><head><title>AWS Lambda sample</title></head><body>"+
                "<h1>Welcome</h1><p>Page generated by a Lambda function.</p>" +
                "</body></html>");
        return response;
    }
}